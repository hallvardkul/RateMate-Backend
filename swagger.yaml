openapi: 3.0.0
info:
  title: RateMate API
  description: API for the RateMate product rating and review platform
  version: 1.0.0
  contact:
    email: your-email@example.com
servers:
  - url: http://localhost:7073/api
    description: Local development server
  - url: https://your-production-url.azurewebsites.net/api
    description: Production server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: User
    description: User profile operations
  - name: Categories
    description: Product category operations
  - name: Products
    description: Product operations
  - name: Reviews
    description: Product review operations
  - name: Comments
    description: Review comment operations

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account with username, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123!
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate a user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123!
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserBasic'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      tags:
        - Categories
      summary: Get all product categories
      description: Retrieve all product categories or only active ones
      parameters:
        - in: query
          name: activeOnly
          schema:
            type: boolean
          description: If true, returns only active categories
      responses:
        '200':
          description: A list of product categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategory'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new product category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a specific product category by its ID
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to retrieve
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Categories
      summary: Update a category
      description: Update an existing product category (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Category name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Delete a product category (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to delete
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# This is just a partial specification - you would add more paths for other endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"
        details:
          type: string
          example: "Detailed error message"
    
    UserBasic:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          example: "2023-05-01T10:30:00Z"
    
    ProductCategory:
      type: object
      properties:
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and accessories
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-05-01T10:30:00Z"
    
    CreateProductCategoryRequest:
      type: object
      required:
        - category_name
      properties:
        category_name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and accessories
        is_active:
          type: boolean
          example: true
    
    UpdateProductCategoryRequest:
      type: object
      properties:
        category_name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic devices and accessories
        is_active:
          type: boolean
          example: true 